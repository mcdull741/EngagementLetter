@model EngagementLetter.Models.Questionnaire
@using EngagementLetter.Models
@{
    ViewData["Title"] = "编辑问卷";
}

<div class="container mt-4">
    <!-- 页面标题区 -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>编辑问卷</h1>
        <a asp-action="Index" class="btn btn-outline-secondary">← 返回列表</a>
    </div>

    <!-- 问卷表单 -->
    <div class="row justify-content-center">
        <div class="col-md-10 col-lg-8">
            <form id="questionnaireForm" asp-action="Edit" method="post" class="needs-validation" novalidate>
                <input type="hidden" asp-for="Id" />
                <input type="hidden" id="questionsJson" name="QuestionsJson" />

                <!-- 问卷属性区域 -->
                <div class="card mb-4 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">问卷基本信息</h5>
                        <hr />

                        <!-- 标题输入 (只读) -->
                        <div class="form-group mb-3">
                            <label asp-for="Title" class="form-label required">问卷标题</label>
                            <input asp-for="Title" class="form-control" readonly />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <!-- 描述输入 -->
                        <div class="form-group mb-3">
                            <label asp-for="Description" class="form-label">问卷描述</label>
                            <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <!-- 启用状态 -->
                        <div class="form-check mb-3">
                            <select asp-for="Status" class="form-select">
                                @foreach (var status in Enum.GetValues(typeof(QuestionnaireStatus)))
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>
                            <label asp-for="Status" class="form-check-label">问卷状态</label>
                        </div>

                        <!-- 创建日期显示 -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">创建日期</label>
                            <div class="form-control-plaintext">@Model.CreatedDate.ToString("yyyy-MM-dd HH:mm")</div>
                        </div>

                        <!-- 修改时间显示 -->
                        <div class="mb-3">
                            <label class="form-label fw-bold">修改时间</label>
                            <div class="form-control-plaintext">@Model.LastModifiedDate.ToString("yyyy-MM-dd HH:mm")
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 问题列表区域 -->
                <div class="card mb-4 shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">问卷问题</h5>
                        <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#questionModal">
                            <i class="bi bi-plus-circle"></i> 添加问题
                        </button>
                    </div>
                    <div class="card-body">
                        <!-- 初始状态：无问题 -->
                        <div class="text-center text-muted py-5" id="noQuestionsMessage">
                            <i class="bi bi-question-circle display-4 mb-3"></i>
                            <p>暂无问题，请点击上方"添加问题"按钮开始添加</p>
                        </div>
                        <!-- 问题列表容器 -->
                        <div id="questionsContainer"></div>
                    </div>
                </div>
                <!-- 操作按钮区 -->
                <div class="d-flex justify-content-end gap-3 mt-5">
                    <a asp-action="Index" class="btn btn-outline-secondary px-4">取消</a>
                    <button type="submit" class="btn btn-primary px-4">保存问卷</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- 问题添加/编辑模态框 -->
<div class="modal fade" id="questionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">添加问题</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="questionFormContainer"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let hasActiveQuestionnaire = false; // 在全局作用域中声明

        // 检查是否已有启用的问卷
        function checkActiveQuestionnaire() {
            return new Promise((resolve) => {
                $.ajax({
                    url: '/Questionnaires/HasActiveQuestionnaire',
                    type: 'GET',
                    data: { excludeId: '@Model.Id' },
                    success: function(data) {
                        resolve(data.hasActive);
                    },
                    error: function() {
                        console.error('检查启用问卷失败');
                        resolve(false);
                    }
                });
            });
        }

        // 页面加载时检查是否已有启用的问卷
        $(document).ready(async function() {
            hasActiveQuestionnaire = await checkActiveQuestionnaire();

            // 为表单添加提交事件监听器
            $('#questionnaireForm').on('submit', function(e) {
                const status = $('#Status').val();
                const isActive = status === 'Published';

                // 如果用户勾选了启用问卷且系统中已有启用的问卷，则显示确认对话框
                if (isActive && hasActiveQuestionnaire) {
                    e.preventDefault(); // 阻止默认提交

                    if (confirm('系统中已有启用的问卷。确定要启用当前问卷并禁用其他问卷吗？')) {
                        // 用户确认后提交表单
                        this.submit();
                    }
                }
                // 如果用户未勾选启用问卷，或系统中没有启用的问卷，则直接提交表单
            });
        });

        let questions = [];
        let currentEditIndex = -1;

        $(document).ready(function () {
            // 初始化问题数据
            @if (Model?.Questions?.Any() == true)
            {
                @foreach (var question in Model.Questions.OrderBy(q => q.SortOrder))
                {
                    <text>
                        questions.push({
                            Id: '@question.Id',
                            Content: '@Html.Raw(question.Content.Replace("'", "\'"))',
                            Type: '@question.Type',
                            OptionsJson: '@Html.Raw(question.OptionsJson?.Replace("'", "\'"))',
                            SortOrder: @question.SortOrder
                        });
                    </text>
                }
            }

            // 更新隐藏字段
            updateQuestionsJson();
            // 渲染问题列表
            renderQuestionsList();
        });

        // 更新隐藏字段
        function updateQuestionsJson() {
            // 根据当前顺序更新SortOrder
            questions.forEach((q, index) => {
                q.SortOrder = index + 1; // 从1开始编号
            });
            document.getElementById('questionsJson').value = JSON.stringify(questions);
        }

        // 渲染问题列表
        function renderQuestionsList() {
            const container = document.getElementById('questionsContainer');
            const noQuestionsMessage = document.getElementById('noQuestionsMessage');

            if (questions.length === 0) {
                noQuestionsMessage.style.display = 'block';
                container.innerHTML = '';
                return;
            }

            noQuestionsMessage.style.display = 'none';

            let html = '';
            questions.forEach((q, index) => {
                html += `
            <div class="card mb-3">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="card-title mb-0">问题 ${index + 1}: ${q.Content}</h6>
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" onclick="moveQuestionUp(${index})" ${index === 0 ? 'disabled' : ''}>
                                <i class="bi bi-arrow-up"></i> 上
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary me-1" onclick="moveQuestionDown(${index})" ${index === questions.length - 1 ? 'disabled' : ''}>
                                <i class="bi bi-arrow-down"></i> 下
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(${index})">
                                编辑
                            </button>
                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteQuestion(${index})">
                                删除
                            </button>
                        </div>
                    </div>
                    <p class="card-text text-muted small">类型: ${q.Type === 'Radio' ? '单选题' : q.Type === 'CheckBox' ? '多选题' : '文本框'}</p>
                    ${q.OptionsJson && q.OptionsJson.trim() ? `<p class="card-text small"><strong>选项:</strong> ${JSON.parse(q.OptionsJson).join(', ')}</p>` : ''}
                </div>
            </div>`;
            });

            container.innerHTML = html;
        }

        // 移动问题向上
        function moveQuestionUp(index) {
            if (index > 0) {
                [questions[index], questions[index - 1]] = [questions[index - 1], questions[index]];
                updateQuestionsJson();
                renderQuestionsList();
            }
        }

        // 移动问题向下
        function moveQuestionDown(index) {
            if (index < questions.length - 1) {
                [questions[index], questions[index + 1]] = [questions[index + 1], questions[index]];
                updateQuestionsJson();
                renderQuestionsList();
            }
        }

        // 打开添加问题模态框
        function openAddModal() {
            currentEditIndex = -1;
            document.getElementById('modalTitle').textContent = '添加问题';
            renderQuestionForm({ Content: '', Type: 'Text', OptionsJson: '' });
            new bootstrap.Modal(document.getElementById('questionModal')).show();
        }

        // 打开编辑问题模态框
        function openEditModal(index) {
            currentEditIndex = index;
            document.getElementById('modalTitle').textContent = '编辑问题';
            renderQuestionForm(questions[index]);
            new bootstrap.Modal(document.getElementById('questionModal')).show();
        }

        // 渲染问题表单
        function renderQuestionForm(questionData) {
            const container = document.getElementById('questionFormContainer');
            container.innerHTML = '';

            let optionsHtml = '';
            if (questionData.OptionsJson) {
                const options = JSON.parse(questionData.OptionsJson);
                optionsHtml = options.map((option, i) => `
                    <div class="option-item d-flex gap-2 mb-2">
                        <input type="text" class="form-control option-input" value="${option}" required />
                        <button type="button" class="btn btn-sm btn-danger remove-option">删除</button>
                    </div>
                `).join('');
            } else if (questionData.Type === 'Radio' || questionData.Type === 'CheckBox') {
                optionsHtml = `
                    <div class="option-item d-flex gap-2 mb-2">
                        <input type="text" class="form-control option-input" placeholder="输入选项内容" required />
                        <button type="button" class="btn btn-sm btn-danger remove-option">删除</button>
                    </div>
                `;
            }

            const formHtml = `
            <div class="question-form">
                <h5>${currentEditIndex === -1 ? '添加问题' : '编辑问题'}</h5>
                <hr />
                <form id="questionForm">
                    <div class="form-group mb-3">
                        <label class="form-label required">问题内容</label>
                        <textarea id="content" class="form-control" rows="3" required>${questionData.Content}</textarea>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label required">问题类型</label>
                        <select id="type" class="form-select" required>
                            <option value="Text" ${questionData.Type === 'Text' ? 'selected' : ''}>文本框</option>
                            <option value="Radio" ${questionData.Type === 'Radio' ? 'selected' : ''}>单选题</option>
                            <option value="CheckBox" ${questionData.Type === 'CheckBox' ? 'selected' : ''}>多选题</option>
                        </select>
                    </div>

                    <div id="optionsContainer" class="mb-3" style="display: ${questionData.Type === 'Radio' || questionData.Type === 'CheckBox' ? 'block' : 'none'};">
                        <label class="form-label required">选项</label>
                        <div class="mb-2">
                            <button type="button" id="addOption" class="btn btn-sm btn-outline-secondary">添加选项</button>
                        </div>
                        <div id="optionsList">${optionsHtml}</div>
                    </div>

                    <div class="text-end">
                        <button type="button" class="btn btn-outline-secondary me-2" data-bs-dismiss="modal">取消</button>
                        <button type="submit" class="btn btn-primary">保存</button>
                    </div>
                </form>
            </div>
            `;

            container.innerHTML = formHtml;

            // 问题类型变更时显示/隐藏选项容器
            document.getElementById('type').addEventListener('change', function() {
                const type = this.value;
                const optionsContainer = document.getElementById('optionsContainer');
                if (type === 'Radio' || type === 'CheckBox') {
                    optionsContainer.style.display = 'block';
                    // 确保至少有一个选项
                    if (document.querySelectorAll('#optionsList .option-item').length === 0) {
                        addOption();
                    }
                } else {
                    optionsContainer.style.display = 'none';
                }
            });

            // 添加选项按钮点击事件
            document.getElementById('addOption').addEventListener('click', addOption);

            // 删除选项按钮事件委托
            document.getElementById('optionsList').addEventListener('click', function(e) {
                if (e.target.classList.contains('remove-option')) {
                    e.target.closest('.option-item').remove();
                }
            });

            // 表单提交处理
            document.getElementById('questionForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveQuestion();
            });
        }

        // 添加选项的辅助函数
        function addOption() {
            const optionsList = document.getElementById('optionsList');
            const newOption = document.createElement('div');
            newOption.className = 'option-item d-flex gap-2 mb-2';
            newOption.innerHTML = `
                <input type="text" class="form-control option-input" placeholder="输入选项内容" required />
                <button type="button" class="btn btn-sm btn-danger remove-option">删除</button>
            `;
            optionsList.appendChild(newOption);
        }

        // 保存问题
        function saveQuestion() {
            const content = document.getElementById('content').value.trim();
            const type = document.getElementById('type').value;

            if (!content) {
                alert('请输入问题内容');
                return;
            }

            let optionsJson = '';
            if (type === 'Radio' || type === 'CheckBox') {
                const options = [];
                document.querySelectorAll('.option-input').forEach(input => {
                    const value = input.value.trim();
                    if (value) {
                        options.push(value);
                    }
                });

                if (options.length === 0) {
                    alert('请至少添加一个选项');
                    return;
                }

                optionsJson = JSON.stringify(options);
            }

            const questionData = {
                Id: currentEditIndex === -1 ? generateUniqueId() : questions[currentEditIndex].Id,
                Content: content,
                Type: type,
                OptionsJson: optionsJson,
                //新问题，添加到问题列表最后
                SortOrder: currentEditIndex === -1 ? (questions.length + 1) : questions[currentEditIndex].SortOrder
            };

            if (currentEditIndex === -1) {
                // 添加新问题
                questions.push(questionData);
            } else {
                // 更新现有问题
                questions[currentEditIndex] = questionData;
            }

            // 更新隐藏字段和问题列表
            updateQuestionsJson();
            renderQuestionsList();

            // 关闭模态框
            const modal = bootstrap.Modal.getInstance(document.getElementById('questionModal'));
            if (modal) {
                modal.hide();

                // 确保模态框完全关闭后执行后续操作
                modal._element.addEventListener('hidden.bs.modal', function() {
                    // 移除所有模态框背景遮罩
                    document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
                        backdrop.remove();
                    });

                    // 重新启用页面交互
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = '';
                    document.body.style.paddingRight = '';
                }, { once: true });
            }
        }

        // 生成唯一ID
        function generateUniqueId() {
            return 'q' + Date.now() + Math.floor(Math.random() * 1000);
        }

        // 删除问题
        function deleteQuestion(index) {
            if (confirm('确定要删除这个问题吗？')) {
                questions.splice(index, 1);
                updateQuestionsJson();
                renderQuestionsList();
            }
        }

        // 绑定添加问题按钮事件
        document.querySelector('[data-bs-target="#questionModal"]').addEventListener('click', openAddModal);
    </script>
}