@model List<EngagementLetter.Models.EngLetter>

@{
    ViewData["Title"] = "Engagement Letters";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-title-box">
                <h4 class="page-title">Engagement Letters</h4>
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active">Engagement Letters</li>
                </ol>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Engagement Letters 列表</h5>
                        <a href="/EngLetters/Create" class="btn btn-primary">
                            <i class="mdi mdi-plus"></i> 创建新的
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-centered mb-0">
                            <thead>
                                <tr>
                                    <th>标题</th>
                                    <th>关联问卷</th>
                                    <th>创建日期</th>
                                    <th>更新日期</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>@item.Title</td>
                                        <td>@item.Questionnaire?.Title</td>
                                        <td>@item.CreatedDate.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>@item.UpdatedDate?.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>
                                            <div class="btn-group">
                                                <a href="/EngLetters/Preview/@item.Id" class="btn btn-sm btn-info">
                                                    <i class="mdi mdi-eye"></i> 预览
                                                </a>
                                                <a href="/EngLetters/Edit/@item.Id" class="btn btn-sm btn-warning">
                                                    <i class="mdi mdi-pencil"></i> 编辑
                                                </a>
                                                <button type="button" class="btn btn-sm btn-success" onclick="exportReport('@item.Id', '@item.Title')">
                                                    <i class="mdi mdi-file-export"></i> 导出报告
                                                </button>
                                                <button type="button" class="btn btn-sm btn-danger" onclick="deleteEngLetter('@item.Id', '@item.Title')">
                                                    <i class="mdi mdi-delete"></i> 删除
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Scripts {
    <script>
        function exportReport(id, title) {
            Swal.fire({
                title: '确认导出',
                text: `确定要导出 "${title}" 的报告吗？`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '确认导出',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    // 显示加载状态
                    Swal.fire({
                        title: '正在导出...',
                        text: '请稍候',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        willOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // 创建隐藏的表单提交
                    const form = document.createElement('form');
                    form.method = 'GET';
                    form.action = `/EngLetters/ExportReport/${id}`;
                    document.body.appendChild(form);
                    form.submit();
                    document.body.removeChild(form);

                    // 关闭加载提示
                    setTimeout(() => {
                        Swal.close();
                    }, 2000);
                }
            });
        }

        function deleteEngLetter(id, title) {
            Swal.fire({
                title: '确认删除',
                text: `确定要删除 "${title}" 吗？此操作不可撤销。`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '确认删除',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    const formData = new FormData();
                    formData.append('id', id);
                    if (token) {
                        formData.append('__RequestVerificationToken', token);
                    }

                    fetch(`/EngLetters/Delete/${id}`, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json().catch(() => ({ success: true, message: '删除成功' }));
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            Swal.fire(
                                '删除成功!',
                                data.message,
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire(
                                '删除失败!',
                                data.message || '删除操作失败',
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        Swal.fire(
                            '删除失败!',
                            error.message || '网络错误',
                            'error'
                        );
                    });
                }
            });
        }
    </script>
}