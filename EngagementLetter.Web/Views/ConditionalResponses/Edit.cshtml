@model EngagementLetter.Models.ViewModels.ConditionalResponseViewModel

@{    
    ViewData["Title"] = "编辑条件响应";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">编辑条件响应</h1>
            @{
                var questionnaireTitle = ViewBag.QuestionnaireTitle as string;
                if (!string.IsNullOrEmpty(questionnaireTitle))
                {
                    <p class="text-muted mb-0">@questionnaireTitle</p>
                }
            }
        </div>
        <a href="/ConditionalResponses?questionnaireId=@ViewBag.QuestionnaireId" class="btn btn-secondary">
            <i class="fas fa-arrow-left me-1"></i>返回列表
        </a>
    </div>

    <!-- 错误提示区域 -->
    @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ErrorCount > 0)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <h5 class="alert-heading">
                <i class="fas fa-exclamation-triangle me-2"></i>表单验证失败
            </h5>
            <div class="mb-0">
                <!-- 显示所有验证错误 -->
                <div asp-validation-summary="All" class="list-unstyled"></div>
                
                <!-- 额外显示详细的错误信息 -->
                @if (ViewData.ModelState.ErrorCount > 0)
                {
                    <ul class="mt-2 list-unstyled">
                        @foreach (var key in ViewData.ModelState.Keys)
                        {
                            foreach (var error in ViewData.ModelState[key].Errors)
                            {
                                <li class="text-sm">@error.ErrorMessage</li>
                            }
                        }
                    </ul>
                }
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <form asp-action="Edit" method="post" id="conditionalResponseForm">
        <input type="hidden" asp-for="Id" />
        <div class="row">
            <div class="col-md-8">
                <!-- 关联问卷 -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">关联问卷 <span class="text-danger">*</span></h5>
                    </div>
                    <div class="card-body">
                        @{
                            var questionnaireId = ViewBag.QuestionnaireId as string;
                            var hasQuestionnaireId = !string.IsNullOrEmpty(questionnaireId);
                            var questionnaireTitle = ViewBag.QuestionnaireTitle as string;
                        }
                        @if (hasQuestionnaireId)
                        {
                            <input type="hidden" asp-for="QuestionnaireId" value="@questionnaireId" />
                            <input type="text" class="form-control" value="@questionnaireTitle" readonly />
                        }
                        else
                        {
                            <select asp-for="QuestionnaireId" class="form-select" asp-items="ViewBag.Questionnaires">
                                <option value="">-- 请选择问卷 --</option>
                            </select>
                        }
                        <span asp-validation-for="QuestionnaireId" class="text-danger field-validation-valid"></span>
                    </div>
                </div>

                <!-- 条件设置 -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">条件设置</h5>
                    </div>
                    <div class="card-body">
                        <div id="conditionsContainer">
                            <iframe id="conditionsFrame" 
                                    src="/ConditionalResponses/_ConditionsFrame" 
                                    width="100%" 
                                    height="300" 
                                    frameborder="0"
                                    style="min-height: 300px;"></iframe>
                        </div>
                        <input type="hidden" id="conditionsJson" name="conditionsJson" />
                        <div id="noQuestionnaireWarning" class="alert alert-warning" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i> 请先选择关联问卷，然后才能设置条件。
                        </div>
                    </div>
                </div>

                <!-- 关联问题和绑定的回答 -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">响应问题与回答 <span class="text-danger">*</span></h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="QuestionId" class="form-label">响应问题 <span class="text-danger">*</span></label>
                            @{                                var questions = ViewBag.Questions as IEnumerable<dynamic>;
                            }
                            @if (questions != null && questions.Any())
                            {
                                <select asp-for="QuestionId" class="form-select" onchange="updateResponseField()">
                                    <option value="">-- 请选择问题 --</option>
                                    @foreach (var question in questions)
                                    {
                                        <option value="@question.Id" data-question-type="@question.Type">@question.Content</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <div class="alert alert-warning">当前问卷没有可用的问题</div>
                            }
                            <span asp-validation-for="QuestionId" class="text-danger field-validation-valid"></span>
                        </div>

                        <div>
                            <label asp-for="Response" class="form-label">响应回答 <span class="text-danger">*</span></label>
                            <div id="responseContainer">
                                <!-- 回答区域将通过JavaScript动态生成 -->
                            </div>
                            <div class="form-text">当满足[条件设置]时，将自动填写此回答</div>
                            <span asp-validation-for="Response" class="text-danger field-validation-valid"></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">操作</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" id="submitBtn">
                                <i class="fas fa-save me-1"></i>保存条件响应
                            </button>
                            <a href="/ConditionalResponses?questionnaireId=@ViewBag.QuestionnaireId" class="btn btn-secondary">
                                <i class="fas fa-times me-1"></i>取消
                            </a>
                        </div>
                    </div>
                </div>

                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">提示</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-unstyled small">
                            <li class="mb-2">
                                <i class="fas fa-info-circle text-info me-1"></i>
                                条件设置将在保存时一并保存到数据库
                            </li>
                            <li class="mb-2">
                                <i class="fas fa-exclamation-triangle text-warning me-1"></i>
                                请确保回答格式与问题类型匹配
                            </li>
                            <li class="mb-2">
                                <i class="fas fa-lightbulb text-success me-1"></i>
                                可以设置多个条件，所有条件都满足时才会自动填写回答
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let conditionsData = @Html.Raw(Json.Serialize(ViewBag.ConditionsData ?? new List<object>()));
        let conditionsFrameLoaded = false;
        
        // 根据选择的问题类型更新回答区域
        function updateResponseField() {
            const selectedOption = $('#QuestionId option:selected');
            const questionType = selectedOption.attr('data-question-type');
            const questionId = selectedOption.val();
            
            if (!questionId) {
                resetResponseField();
                return;
            }
            
            // 从ViewBag.Questions中获取问题详情
            var questions = @Html.Raw(Json.Serialize(ViewBag.Questions ?? new List<object>()));
            var selectedQuestion = questions.find(q => (q.Id || q.id) === questionId);

            if (selectedQuestion) {
                renderResponseField(selectedQuestion);
            } else {
                console.error('未找到问题详情');
                resetResponseField();
            }
        }
        
        // 渲染回答区域
        function renderResponseField(question) {
            const container = $('#responseContainer');
            const questionType = question.type;
            let html = '';
            
            switch (questionType) {
                case 0: // Radio
                    html = renderRadioField(question);
                    break;
                case 1: // Checkbox
                    html = renderCheckboxField(question);
                    break;
                case 2: // Text (textarea)
                default:
                    html = renderTextareaField();
                    break;
            }
            container.html(html);
        }
        
        // 渲染单选按钮组
        function renderRadioField(question) {
            try {
                const options = JSON.parse(question.OptionsJson || question.optionsJson || '[]');
                const currentResponse = @Html.Raw(Model?.Response ?? "[]");
                console.log("renderRadioField", options, currentResponse);
                let selectedValue = '';
                
                if (currentResponse && Array.isArray(currentResponse) && currentResponse.length > 0) {
                    selectedValue = currentResponse[0];
                }
                
                let html = '<div class="form-check-group">';
                
                options.forEach((option, index) => {
                    const optionText = typeof option === 'string' ? option : option.text || option.value || '';
                    const optionValue = typeof option === 'string' ? option : option.value || optionText;
                    const isSelected = optionValue === selectedValue;
                    
                    html += `
                        <div class="form-check">
                            <input class="form-check-input" type="radio" 
                                name="responseRadio" 
                                id="responseRadio_${index}" 
                                value="${optionValue}" ${isSelected ? 'checked' : ''}>
                            <label class="form-check-label" for="responseRadio_${index}">
                                ${optionText}
                            </label>
                        </div>
                    `;
                });
                
                html += '</div>';
                return html;
            } catch (e) {
                console.error('渲染单选选项失败:', e);
                return renderTextareaField();
            }
        }
        
        // 渲染多选框组
        function renderCheckboxField(question) {
            try {
                const options = JSON.parse(question.OptionsJson || question.optionsJson || '[]');
                const currentResponse = @Html.Raw(Json.Serialize(Model?.Response ?? "[]"));
                const selectedValues = currentResponse && Array.isArray(currentResponse) ? currentResponse : [];
                
                let html = '<div class="form-check-group">';
                
                options.forEach((option, index) => {
                    const optionText = typeof option === 'string' ? option : option.text || option.value || '';
                    const optionValue = typeof option === 'string' ? option : option.value || optionText;
                    const isSelected = selectedValues.includes(optionValue);
                    
                    html += `
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" 
                                name="responseCheckbox" 
                                id="responseCheckbox_${index}" 
                                value="${optionValue}" ${isSelected ? 'checked' : ''}>
                            <label class="form-check-label" for="responseCheckbox_${index}">
                                ${optionText}
                            </label>
                        </div>
                    `;
                });
                
                html += '</div>';
                return html;
            } catch (e) {
                console.error('渲染多选选项失败:', e);
                return renderTextareaField();
            }
        }
        
        // 渲染文本域
        function renderTextareaField() {
            const currentResponse = @Html.Raw(Json.Serialize(Model?.Response ?? "[]"));
            let textValue = '';
            
            if (currentResponse && Array.isArray(currentResponse) && currentResponse.length > 0) {
                textValue = currentResponse[0] || '';
            }
            
            return `<textarea id="Response" name="Response" class="form-control" rows="4" placeholder="请输入预期的回答内容">${textValue}</textarea>`;
        }
        
        // 重置回答区域为默认的textarea
        function resetResponseField() {
            $('#responseContainer').html(renderTextareaField());
        }

        $(document).ready(function() {
            // 预设置问卷ID
            const urlParams = new URLSearchParams(window.location.search);
            const questionnaireId = urlParams.get('questionnaireId') || '@ViewBag.QuestionnaireId';
        
            if (questionnaireId) {
                $('#QuestionnaireId').val(questionnaireId);
            }

            // 初始化条件区域显示状态
            const initialQuestionnaireId = $('#QuestionnaireId').val();
            if (initialQuestionnaireId) {
                $('#conditionsContainer').show();
                $('#noQuestionnaireWarning').hide();
            } else {
                $('#conditionsContainer').hide();
                $('#noQuestionnaireWarning').show();
            }

            // 监听问卷变化
            $('#QuestionnaireId').on('change', function() {
                const selectedQuestionnaireId = $(this).val();
                if (selectedQuestionnaireId) {
                    $('#conditionsContainer').show();
                    $('#noQuestionnaireWarning').hide();
                    
                    // 清空问题选择
                    $('#QuestionId').val('');
                    // 重置回答区域为默认的textarea
                    resetResponseField();
                    
                    if (conditionsFrameLoaded) {
                        const frame = document.getElementById('conditionsFrame');
                        frame.contentWindow.postMessage({
                            type: 'setQuestionnaireId',
                            questionnaireId: selectedQuestionnaireId,
                            conditions: conditionsData
                        }, '*');
                    }
                } else {
                    $('#conditionsContainer').hide();
                    $('#noQuestionnaireWarning').show();
                    // 清空问题选择
                    $('#QuestionId').val('');
                    // 重置回答区域为默认的textarea
                    resetResponseField();
                }
            });

            // 监听来自iframe的消息
            window.addEventListener('message', function(event) {
                if (event.data.type === 'conditionsFrameLoaded') {
                    conditionsFrameLoaded = true;
                    const selectedQuestionnaireId = $('#QuestionnaireId').val();
                    if (selectedQuestionnaireId) {
                        $('#conditionsContainer').show();
                        $('#noQuestionnaireWarning').hide();
                        const frame = document.getElementById('conditionsFrame');
                        frame.contentWindow.postMessage({
                            type: 'setQuestionnaireId',
                            questionnaireId: selectedQuestionnaireId,
                            conditions: conditionsData
                        }, '*');
                    } else {
                        $('#conditionsContainer').hide();
                        $('#noQuestionnaireWarning').show();
                    }
                } else if (event.data.type === 'conditionsData') {
                    conditionsData = event.data.conditions;
                    $('#conditionsJson').val(JSON.stringify(conditionsData));
                }
            });

            // 调整iframe高度
            function adjustIframeHeight() {
                const frame = document.getElementById('conditionsFrame');
                if (frame && frame.contentDocument) {
                    const height = frame.contentDocument.body.scrollHeight;
                    frame.style.height = (height + 50) + 'px';
                }
            }

            // 定期检查iframe高度
            setInterval(adjustIframeHeight, 500);

            // 滚动到第一个错误字段
            function scrollToFirstError() {
                const firstError = $('.field-validation-error, .input-validation-error').first();
                if (firstError.length) {
                    $('html, body').animate({
                        scrollTop: firstError.offset().top - 100
                    }, 500);
                    firstError.focus();
                }
            }

            // 页面加载时如果有错误，滚动到错误位置
            @if (!ViewData.ModelState.IsValid)
            {
                <text>
                setTimeout(scrollToFirstError, 100);
                </text>
            }

            // 表单提交处理
            $('#conditionalResponseForm').on('submit', function(e) {
                // 根据当前问题类型，收集回答数据并设置到隐藏字段
                var questionId = $('#QuestionId option:selected').val();
                var questions = @Html.Raw(Json.Serialize(ViewBag.Questions ?? new List<object>()));
                    
                var selectedQuestion = questions.find(q => (q.Id || q.id) === questionId);
                // 确保selectedQuestion存在
                if (selectedQuestion) {
                    var questionType = selectedQuestion.type;
                    let responseValue = '';
                    
                    switch (parseInt(questionType)) {
                        case 0: // Radio
                            responseValue = JSON.stringify([$('#responseContainer input[type="radio"]:checked').val() || '']);
                            break;
                        case 1: // Checkbox
                            const checkedValues = [];
                            $('#responseContainer input[type="checkbox"]:checked').each(function() {
                                checkedValues.push($(this).val());
                            });
                            responseValue = JSON.stringify(checkedValues);
                            break;
                        case 2: // Text (textarea)
                        default:
                            responseValue = JSON.stringify([$('#Response').val() || '']);
                            break;
                    }
                    
                    // 确保创建并设置ResponseHidden字段
                    if (!$('#ResponseHidden').length) {
                        $('<input>').attr({
                            type: 'hidden',
                            id: 'ResponseHidden',
                            name: 'ResponseHidden'
                        }).appendTo('#conditionalResponseForm');
                    }
                    // 设置隐藏字段的值
                    $('#ResponseHidden').val(responseValue);
                    
                    // 同时也更新原始的Response字段，确保模型验证通过
                    if (!$('#Response').length) {
                        $('<input>').attr({
                            type: 'hidden',
                            id: 'Response',
                            name: 'Response'
                        }).appendTo('#conditionalResponseForm');
                    }
                    $('#Response').val(responseValue);
                } else {
                    console.log('未找到选定的问题');
                }
                
                // 打印即将提交的表单数据
                console.log('即将提交的表单数据:');
                console.log('QuestionnaireId:', $('#QuestionnaireId').val());
                console.log('QuestionId:', $('#QuestionId').val());
                console.log('Response:', $('#ResponseHidden').val() || $('#Response').val());
                console.log('conditionsJson:', $('#conditionsJson').val());
                
                const submitBtn = $('#submitBtn');
                
                // 禁用提交按钮防止重复提交
                submitBtn.prop('disabled', true);
                submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>保存中...');
                
                // 如果验证失败，重新启用按钮
                if (!$(this).valid()) {
                    submitBtn.prop('disabled', false);
                    submitBtn.html('<i class="fas fa-save me-1"></i>保存条件响应');
                    scrollToFirstError();
                    return false;
                }
            });
            
            // 初始化页面数据
            function initializePageData() {
                // 如果有选中的问题，渲染对应的回答区域
                const questionId = $('#QuestionId').val();
                if (questionId) {
                    updateResponseField();
                }
            }
            
            // 页面加载时初始化数据
            initializePageData();
        });
    </script>
}